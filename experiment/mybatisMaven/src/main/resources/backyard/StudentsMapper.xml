<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="backyard.StudentsMapper">
    <select id="selectAll" resultType="backyard.StudentsMessage">
        select * from students s1,societys s2 where s1.societyId=s2.societyId;
    </select>
    <select id="selectById" resultType="backyard.StudentsMessage">
        select * from students s1,societys s2 where s1.societyId=s2.societyId and s1.id=#{id};
    </select>
    <select id="selectBySociety" resultType="backyard.StudentsMessage">
        select * from students s1,societys s2 where s1.societyId=s2.societyId and s2.societyName=#{studentName};
    </select>
    <select id="selectByTwoSixty" resultType="backyard.RankShow">
        select
        id,
        studentName,
        englishGrade,
        mathGrade
        from students
        <!--这是小于号-->
        where englishGrade&lt;=#{englishGrade}
        and mathGrade&lt;=#{mathGrade}
        order by englishGrade desc,mathGrade desc;
    </select>
    <select id="selectDimObject" resultType="backyard.RankShow">
        select
        id,
        studentName,
        englishGrade,
        mathGrade
        from students
        <!-- 新知识：like的意思是模糊查询-->
        where studentName like #{studentName}
        and englishGrade>=#{englishGrade}
        and mathGrade>=#{mathGrade}
        order by englishGrade desc,mathGrade desc;
    </select>
    <select id="selectDimMap" resultType="backyard.RankShow">
        select
        id,
        studentName,
        englishGrade,
        mathGrade
        from students
        <!-- 新知识：like的意思是模糊查询-->
        where studentName like #{studentName}
        and englishGrade>=#{englishGrade}
        and mathGrade>=#{mathGrade}
        order by englishGrade desc,mathGrade desc;
    </select>
    <select id="selectLack" resultType="backyard.RankShow">
        select
        *
        from students
        <!--第一个为空时，第二句的and会报错，可以通过在where后面加1=1来避免，但是有更好的方法，就是用<where>标签-->
        <where>
            <if test="studentName!=null and studentName!=''">
                studentName like #{studentName}
            </if>
            <if test="englishGrade !=null">
                and englishGrade>=#{englishGrade}
            </if>
            <if test="mathGrade!=null">
                and mathGrade>=#{mathGrade}
            </if>
        </where>
        order by englishGrade desc,mathGrade desc;
    </select>
    <select id="selectChoice" resultType="backyard.RankShow">
        select
        *
        from students
        where
        <choose>
            <!--choose相当于switch,when相当于case-->
            <when test="studentName!=null and studentName!=''">
                studentName like #{studentName}
            </when>
            <when test="englishGrade !=null">
                englishGrade>=#{englishGrade}
            </when>
            <when test="mathGrade!=null">
                mathGrade>=#{mathGrade}
            </when>
            <!--otherwise相当于default-->
            <otherwise>1=1</otherwise>
        </choose>
        order by englishGrade desc,mathGrade desc;
    </select>
    <!--useGeneratedKeys="true"意思是返回插入信息的主键值-->
    <!--keyProperty的参数是实体类的属性-->
    <insert id="addOrigin" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
        students
        (studentName,sex,englishGrade,mathGrade,height,birthday,money)
        VALUES
        (#{studentName},
        #{sex},
        #{englishGrade},
        #{mathGrade},
        #{height},
        #{birthday},
        #{money})
    </insert>
    <!--update是返回不了id的-->
    <update id="updateOrigin">
        update students set
        englishGrade=#{englishGrade},
        mathGrade=#{mathGrade}
        where studentName=#{studentName};
    </update>
    <update id="updateVaried">
        update students
        <set>
            <if test="englishGrade!=null">
                englishGrade=#{englishGrade},
            </if>
            <if test="mathGrade!=null">
                mathGrade=#{mathGrade},
            </if>
        </set>
        where studentName=#{studentName};
    </update>
    <delete id="deleteOrigin">
        <!--注意:delete没有星号-->
        delete from students where studentName = #{studentName};
    </delete>
    <!-- 批量删除，注意在接口中重写array(默认组名)-->
    <delete id="deleteGroup">
        delete from students
        where studentName in
        <!--从左到右分别是：组名，参数名，分割符，开头字符，结尾字符-->
        <foreach collection="nameGroup" item="studentName" separator="," open="(" close=")">
            #{studentName}
        </foreach>
    </delete>
</mapper>